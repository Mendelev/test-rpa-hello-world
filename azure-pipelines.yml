# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main

pool:
  vmImage: ubuntu-latest

variables:
- group: SMTP
- name: connection
  value: Test-Personal-Uipath # The name of your service connection on Azure DevOps
- name: emailToReceiveResults
  value: yuricamargo4@gmail.com  # The email to send the results of pipeline
- name: FolderName #Name of the folde to publish package
  value: Shared
- name: createProcessBoolean
  value: true
- name: VarRunWorkflowAnalyzer #If true, runs workflow analyzer
  value: true
- name: WorkflowAnalyzerShouldFailPipeline
  value: true




resources:
  repositories:
    - repository: project-rules-workflow-analyzer
      endpoint: Github
      type: github
      name: smarthis-ai/Smarthis.UiPathWFARules
    - repository: scripts-repository
      endpoint: Test-Permission
      type: git
      name: External-Scripts/Criar-Excluir-Maquina
      ref: main
    - repository: template-script-machine
      type: git
      name: External-Scripts/template-machine
    - repository: template-uipath
      type: git
      name: Projetos/Template-Uipath-Pipeline


jobs:

## Job that creates a Windows Machine on AWS to run Workflow Analyzer and get its instance ID

- job: CreateMachine
  condition: eq(variables['VarRunWorkflowAnalyzer'],true)
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: python-script-create-vm.yml@template-script-machine  # Template reference 

- job: GenerateRulesFile
  dependsOn: CreateMachine
  condition: and(succeeded('CreateMachine'), eq(variables['VarRunWorkflowAnalyzer'],true))
  variables:
    InstanceID: $[ dependencies.CreateMachine.outputs['runScriptThatCreatesMachine.INSTANCE_ID'] ]
  pool:
    name: Workflow-Analyzer
    demands:
    - agent.name -equals workflow-analyzer-agent-$(InstanceID)
  steps:
  - template: generate-rules-file.yml@template-uipath
    

## Job that runs workflow analyzer on the machine created in the previous step

- job: RunWorkflowAnalyzer
  dependsOn: 
    - GenerateRulesFile
    - CreateMachine
  condition: and(succeeded('GenerateRulesFile'), eq(variables['VarRunWorkflowAnalyzer'],true))
  variables:
    - name: InstanceID
      value: $[ dependencies.CreateMachine.outputs['runScriptThatCreatesMachine.INSTANCE_ID'] ]
    - name: caminho
      value: $[ dependencies.GenerateRulesFile.outputs['GenerateRulesFileStep.caminho'] ]
  pool: 
    name: Workflow-Analyzer
    demands:
    - agent.name -equals workflow-analyzer-agent-$(InstanceID)
  steps:
  - template: workflow-analyzer.yml@template-uipath  # Template reference 

## Job that deletes the windows machine on AWS

- job: TerminateMachine
  dependsOn:
    - CreateMachine 
    - GenerateRulesFile
    - RunWorkflowAnalyzer
  condition: and(or(succeededOrFailed('GenerateRulesFile'),succeededOrFailed('RunWorkflowAnalyzer')), eq(variables['VarRunWorkflowAnalyzer'],true))
  variables:
    InstanceID: $[ dependencies.CreateMachine.outputs['runScriptThatCreatesMachine.INSTANCE_ID'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: python-script-delete-vm.yml@template-script-machine

## Job that generates the package and publish on Uipath Orchestator

- job: GenerateResultsAndSendEmail
  dependsOn:
    - TerminateMachine
  condition: eq(variables['VarRunWorkflowAnalyzer'],true)
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: generate_html_from_json_output.yml@template-uipath  # Template reference
  - template: send-results-python.yml@template-uipath  # Template reference
    parameters:
      emailToReceiveResults: '$(emailToReceiveResults)'


## Job that generates the package and publish on Uipath Orchestator

- job: BuildAndPublish
  dependsOn:
    - GenerateResultsAndSendEmail
  condition: not(and(eq(succeeded('RunWorkflowAnalyzer'),'false'),eq(variables['WorkflowAnalyzerShouldFailPipeline'],'true')))
    #condition: eq(and(succeeded('RunWorkflowAnalyzer'), variables['WorkflowAnalyzerShouldFailPipeline']),'false')
  #condition: or(succeeded('RunWorkflowAnalyzer'), eq(variables['VarRunWorkflowAnalyzer'],false))
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: pack-and-publish.yml@template-uipath  # Template reference
    parameters:
      connection: $(connection) # You need to change this with your Orchestrator Connection Name
      FolderName: '$(FolderName)'
      createProcessBoolean: '$(createProcessBoolean)'

## Job that send results of pipeline to email. This job runs even if previous jobs fails

- job: SendResults
  dependsOn:
    - BuildAndPublish
    - TerminateMachine
  condition: or(succeededOrFailed('TerminateMachine'),eq(variables['VarRunWorkflowAnalyzer'],false))
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: send-results.yml@template-uipath
    parameters:
      email: '$(emailToReceiveResults)'